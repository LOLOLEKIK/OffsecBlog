<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exploit on LOLOLEKIK</title>
    <link>http://lololekik.com/tags/exploit/</link>
    <description>Recent content in exploit on LOLOLEKIK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language><atom:link href="http://lololekik.com/tags/exploit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Active directory </title>
      <link>http://lololekik.com/cuisine/ad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://lololekik.com/cuisine/ad/</guid>
      <description>Introduction Active directory est le service d&amp;rsquo;annuaire LDAP de microsoft. Il écoute sur le port 389 (Local domain controller) et 3268 (forêt entière)
Bloodhound Bloodhound est un outil permettant d&amp;rsquo;avoir un visuel l&amp;rsquo;architecture de l&amp;rsquo;active directory. Il permet de rapidement visualiser les droits, utilisateurs, objets..
Récupération des informations pour construire la BDD
──(lololekik㉿Ashitaka)-[~/tools/bloodhound/sauna] └─$ bloodhound-python -u svc_loanmgr -p Moneymakestheworldgoround! -d EGOTISTICAL-BANK.LOCAL -ns 10.10.10.175 -c All INFO: Found AD domain: egotistical-bank.local INFO: Connecting to LDAP server: SAUNA.</description>
    </item>
    
    <item>
      <title>Buffer Overflow</title>
      <link>http://lololekik.com/cuisine/bo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://lololekik.com/cuisine/bo/</guid>
      <description>Introduction Voici un petit guide pour exploiter des buffers overflow simple avec shellcode.
Dans notre cas on utilise une room de TryHackMe pour s&amp;rsquo;entrainer et on a accès à la machine distante avec immunity.
Fuzzing La première étape consite à fuzz le programme pour provoquer un segmentation fault.
Pour cela j&amp;rsquo;utilise le script ci-dessous
#!/usr/bin/env python3 import socket, time, sys ip = &amp;#34;10.10.9.235&amp;#34; port = 1337 timeout = 5 prefix = &amp;#34;OVERFLOW4 &amp;#34; # si besoin string = prefix + &amp;#34;A&amp;#34; * 100 while True: try: with socket.</description>
    </item>
    
    <item>
      <title>NoSQL Injection Blind</title>
      <link>http://lololekik.com/exploit/nosqlinjection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://lololekik.com/exploit/nosqlinjection/</guid>
      <description>Introduction Pour les injections NoSQL comme mongoDB, j&amp;rsquo;ai developpé un petit script qui permet de trouver des informations à l&amp;rsquo;aveugle. Il suffit de rentrer l&amp;rsquo;url en indiquant l&amp;rsquo;endroit d&amp;rsquo;injection. Il faut ensuite préciser au script comment il peut reconnaitre une page d&amp;rsquo;erreur et une page valide. Puis le tour est joué !
Avant de faire tourner le script il faut connaitre la page qui nous donne une erreur et la page qui nous indique que le payload a fonctionné.</description>
    </item>
    
  </channel>
</rss>
